<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.2</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.deploy</groupId>
    <artifactId>deployk8s</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>deployk8s</name>
    <description>deployk8s</description>
    <properties>
        <java.version>11</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
<!--    <build>-->
<!--        <finalName>deployk8s</finalName>-->
<!--        <plugins>-->
<!--            <plugin>-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    <excludes>-->
<!--                        <exclude>-->
<!--                            <groupId>org.projectlombok</groupId>-->
<!--                            <artifactId>lombok</artifactId>-->
<!--                        </exclude>-->
<!--                    </excludes>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--            &lt;!&ndash; 使用Maven插件直接将应用打包为一个Docker镜像 &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                &lt;!&ndash; 这里使用新版dockerfile-maven-plugin插件 &ndash;&gt;-->
<!--                <artifactId>dockerfile-maven-plugin</artifactId>-->
<!--                <version>1.4.10</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>default</id>-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                            <goal>push</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash; Dockerfile目录指定 根目录下&ndash;&gt;-->
<!--                    <dockerfile>Dockerfile</dockerfile>-->
<!--                    &lt;!&ndash;远程仓库名 &ndash;&gt;-->
<!--                    <repository>cenobitor/${project.build.finalName}</repository>-->
<!--                    &lt;!&ndash; 生成镜像标签 如不指定 默认为latest &ndash;&gt;-->
<!--                    <tag>${project.version}</tag>-->
<!--                    <buildArgs>-->
<!--                        &lt;!&ndash; 理论上这里定义的参数可以传递到Dockerfile文件中，目前未实现 &ndash;&gt;-->
<!--                        <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>-->
<!--                    </buildArgs>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--        </plugins>-->
<!--    </build>-->



</project>
